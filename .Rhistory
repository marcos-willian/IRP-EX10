for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
rm(list = ls())
mostraImagem <- function( x ){
rotate <- function(x) t(apply(x, 2, rev))
img <- matrix( x, nrow=64 )
cor <- rev( gray(50:1/50) )
image( rotate( img ), col=cor )
}
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
library(caTools) #Função sample.split
require(RnavGraphImageData)
require(caret)
require(naivebayes)
# Carregando a Base de dados
dataFaces = list()
data( faces )
dataFaces$faces = t( faces )
colnames(dataFaces$faces) = paste("v" ,
as.character(seq(from = 1, to = ncol(dataFaces$faces), by = 1)),
sep = ".")
rownames(dataFaces$faces) = NULL
#Gerando os rótulos
y <- NULL
for(i in 1:nrow(dataFaces$faces) ){
y <- c( y, ((i-1) %/% 10) + 1 )
}
dataFaces$classes = as.factor(y)
#Realiza redução da dimensionalidade
dataFaces$pcaFaces = predict( preProcess(dataFaces$faces,
method = c("BoxCox", "center", "scale", "pca")),
dataFaces$faces)
acuracia = list(total = NULL)
for(i in 1:41){
acuracia[i+1] = NULL
}
maxAcuracy = 0
nComponentes = 16
set.seed(0)
#Separa dados de treinamento e teste
acu = c()
for(nComponentes in 1:50){
for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
trainData$pcaFaces[, 1:nComponentes]
testData$pcaFaces[, 1:nComponentes]
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, testData$pcaFaces[, 1:nComponentes], type = "class")
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:16], type = "class")
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:16], type = "class")
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:1], type = "class")
nComponentes = 2
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
for(nComponentes in 2:50){
for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
rm(list = ls())
mostraImagem <- function( x ){
rotate <- function(x) t(apply(x, 2, rev))
img <- matrix( x, nrow=64 )
cor <- rev( gray(50:1/50) )
image( rotate( img ), col=cor )
}
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
library(caTools) #Função sample.split
require(RnavGraphImageData)
require(caret)
require(naivebayes)
# Carregando a Base de dados
dataFaces = list()
data( faces )
dataFaces$faces = t( faces )
colnames(dataFaces$faces) = paste("v" ,
as.character(seq(from = 1, to = ncol(dataFaces$faces), by = 1)),
sep = ".")
rownames(dataFaces$faces) = NULL
#Gerando os rótulos
y <- NULL
for(i in 1:nrow(dataFaces$faces) ){
y <- c( y, ((i-1) %/% 10) + 1 )
}
dataFaces$classes = as.factor(y)
#Realiza redução da dimensionalidade
dataFaces$pcaFaces = predict( preProcess(dataFaces$faces,
method = c("BoxCox", "center", "scale", "pca")),
dataFaces$faces)
acuracia = list(total = NULL)
for(i in 1:41){
acuracia[i+1] = NULL
}
maxAcuracy = 0
nComponentes = 16
set.seed(0)
#Separa dados de treinamento e teste
acu = c()
for(nComponentes in 2:50){
for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
max(acu)
acu[0] = 0
acu[0]
acu[1]
acu[1]
acu
acu[2]
acu[1]
acu[1] = 0
acu[2]
acu[1]
max(acu)
acu
which(acu == max(acu))
rm(list = ls())
mostraImagem <- function( x ){
rotate <- function(x) t(apply(x, 2, rev))
img <- matrix( x, nrow=64 )
cor <- rev( gray(50:1/50) )
image( rotate( img ), col=cor )
}
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
library(caTools) #Função sample.split
require(RnavGraphImageData)
require(caret)
require(naivebayes)
# Carregando a Base de dados
dataFaces = list()
data( faces )
dataFaces$faces = t( faces )
colnames(dataFaces$faces) = paste("v" ,
as.character(seq(from = 1, to = ncol(dataFaces$faces), by = 1)),
sep = ".")
rownames(dataFaces$faces) = NULL
#Gerando os rótulos
y <- NULL
for(i in 1:nrow(dataFaces$faces) ){
y <- c( y, ((i-1) %/% 10) + 1 )
}
dataFaces$classes = as.factor(y)
#Realiza redução da dimensionalidade
dataFaces$pcaFaces = predict( preProcess(dataFaces$faces,
method = c("BoxCox", "center", "scale", "pca")),
dataFaces$faces)
acuracia = list(total = NULL)
for(i in 1:41){
acuracia[i+1] = NULL
}
maxAcuracy = 0
nComponentes = 16
set.seed(0)
#Separa dados de treinamento e teste
acu = c(0)
for(nComponentes in 2:ncol(dataFaces$pcaFaces)){
for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
max(acu)
which(acu == max(acu))
#Realiza redução da dimensionalidade
dataFaces$pcaFaces = predict( preProcess(dataFaces$faces,
method = c("BoxCox", "center", "scale", "pca")),
dataFaces$faces)
rm(list = ls())
mostraImagem <- function( x ){
rotate <- function(x) t(apply(x, 2, rev))
img <- matrix( x, nrow=64 )
cor <- rev( gray(50:1/50) )
image( rotate( img ), col=cor )
}
acurracy <- function(respostas, teste){
return(sum(as.numeric(respostas == teste))/length(respostas))
}
library(caTools) #Função sample.split
require(RnavGraphImageData)
require(caret)
require(naivebayes)
# Carregando a Base de dados
dataFaces = list()
data( faces )
dataFaces$faces = t( faces )
colnames(dataFaces$faces) = paste("v" ,
as.character(seq(from = 1, to = ncol(dataFaces$faces), by = 1)),
sep = ".")
rownames(dataFaces$faces) = NULL
#Gerando os rótulos
y <- NULL
for(i in 1:nrow(dataFaces$faces) ){
y <- c( y, ((i-1) %/% 10) + 1 )
}
dataFaces$classes = as.factor(y)
#Realiza redução da dimensionalidade
dataFaces$pcaFaces = predict( preProcess(dataFaces$faces,
method = c("BoxCox", "center", "scale", "pca")),
dataFaces$faces)
acuracia = list(total = NULL)
for(i in 1:41){
acuracia[i+1] = NULL
}
maxAcuracy = 0
nComponentes = 16
set.seed(0)
#Separa dados de treinamento e teste
acu = c(0)
for(nComponentes in 2:ncol(dataFaces$pcaFaces)){
for(i in 1:5){
splitTrainData = NULL
for(k in 1:40){
splitTrainData = c(splitTrainData,
sample.split(dataFaces$classes[dataFaces$classes == dataFaces$classes[k*1]], 1/2))
}
trainData = list(
pcaFaces = dataFaces$pcaFaces[splitTrainData, ],
classes = dataFaces$classes[splitTrainData]
)
testData = list(
pcaFaces = dataFaces$pcaFaces[!splitTrainData, ],
classes = dataFaces$classes[!splitTrainData]
)
#Treina modelo
bayesTrain = naive_bayes(trainData$pcaFaces[, 1:nComponentes], trainData$classes)
#Testa modelo
bayesClass = predict(bayesTrain, newdata = testData$pcaFaces[, 1:nComponentes], type = "class")
acuracia$total = c(acuracia$total, acurracy(testData$classes, bayesClass))
#
#for(k in 1:40){
# acuracia[[k+1]] = c(acuracia[[k+1]],
#                    acurracy(testData$classes[((k-1)*5 + 1):(k*5)], bayesClass[((k-1)*5 + 1):(k*5)]))
#}
#if(acuracia$total[i] > maxAcuracy){
# maxAcuracy = acuracia$total[i]
#matrixConfusao = confusionMatrix(data = bayesClass, reference = testData$classes)
#}
}
acu[nComponentes] = mean(acuracia$total)
}
max(acu)
which(acu == max(acu))
source("C:/Users/marki/OneDrive - Universidade Federal de Minas Gerais/Livros_e_Faculdade/Reconhecimento de padrões/EX10/RCode/EX10.R", encoding = 'UTF-8')
acuraciaMedia[1, ] = c(0, mean(acuracia$total), sd(acuracia$total))
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE)
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE)
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",")
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ',')
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ',')
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE, col.names = FALSE)
write.csv(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE)
write.csv2(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE)
write.table(acuraciaMedia, "acuracia.csv", sep = ";", dec = ",", row.names = FALSE)
matrixConfusao
acuraciaMedia
plot(faces)
plot(dataFaces$pcaFaces)
plot(dataFaces$pcaFaces, col = dataFaces$classes)
plot(dataFaces$pcaFaces[dataFaces$classes == 39], col = dataFaces$classes[39])
dataFaces$pcaFaces
plot(dataFaces$pcaFaces[dataFaces$classes == 39, 1:2], col = dataFaces$classes[39])
plot(dataFaces$pcaFaces[dataFaces$classes == 31, 1:2], col = dataFaces$classes[31])
plot(dataFaces$pcaFaces[dataFaces$classes == 36, 1:2], col = dataFaces$classes[36])
mostraImagem(dataFaces$faces[360,])
mostraImagem(dataFaces$faces[361,])
mostraImagem(dataFaces$faces[362,])
mostraImagem(dataFaces$faces[364,])
mostraImagem(dataFaces$faces[314,])
mostraImagem(dataFaces$faces[314,])
dataFaces$classes[314]
mostraImagem(dataFaces$faces[310,])
dataFaces$classes[310]
dataFaces$classes[311]
dataFaces$classes[301]
mostraImagem(dataFaces$faces[305,])
mostraImagem(dataFaces$faces[365,])
dataFaces$classes[365]
dataFaces$classes[355]
mostraImagem(dataFaces$faces[355,])
mostraImagem(dataFaces$faces[305,])
dataFaces$classes[305]
mostraImagem(dataFaces$faces[356,])
mostraImagem(dataFaces$faces[357,])
mostraImagem(dataFaces$faces[358,])
mostraImagem(dataFaces$faces[359,])
mostraImagem(dataFaces$faces[3554,])
mostraImagem(dataFaces$faces[354,])
mostraImagem(dataFaces$faces[353,])
mostraImagem(dataFaces$faces[352,])
mostraImagem(dataFaces$faces[351,])
mostraImagem(dataFaces$faces[301,])
mostraImagem(dataFaces$faces[302,])
mostraImagem(dataFaces$faces[303,])
mostraImagem(dataFaces$faces[304,])
mostraImagem(dataFaces$faces[305,])
mostraImagem(dataFaces$faces[306,])
mostraImagem(dataFaces$faces[307,])
mostraImagem(dataFaces$faces[308,])
mostraImagem(dataFaces$faces[309,])
dataFaces$classes[355]
mostraImagem(dataFaces$faces[29,])
mostraImagem(dataFaces$faces[28,])
mostraImagem(dataFaces$faces[27,])
dataFaces$classes[29]
dataFaces$classes[18]
dataFaces$classes[28]
mostraImagem(dataFaces$faces[25,])
mostraImagem(dataFaces$faces[24,])
mostraImagem(dataFaces$faces[22,])
mostraImagem(dataFaces$faces[159,])
dataFaces$classes[159]
mostraImagem(dataFaces$faces[158+,])
mostraImagem(dataFaces$faces[158,])
mostraImagem(dataFaces$faces[156,])
mostraImagem(dataFaces$faces[157,])
mostraImagem(dataFaces$faces[154,])
mostraImagem(dataFaces$faces[152,])
mostraImagem(dataFaces$faces[151,])
mostraImagem(dataFaces$faces[158,])
mostraImagem(dataFaces$faces[159,])
mostraImagem(dataFaces$faces[25,])
mostraImagem(dataFaces$faces[28,])
mostraImagem(dataFaces$faces[29,])
mostraImagem(dataFaces$faces[359,])
mostraImagem(dataFaces$faces[355,])
mostraImagem(dataFaces$faces[356,])
mostraImagem(dataFaces$faces[357,])
mostraImagem(dataFaces$faces[358,])
mostraImagem(dataFaces$faces[354,])
mostraImagem(dataFaces$faces[353,])
mostraImagem(dataFaces$faces[352,])
mostraImagem(dataFaces$faces[351,])
mostraImagem(dataFaces$faces[354,])
mostraImagem(dataFaces$faces[355,])
mostraImagem(dataFaces$faces[356,])
mostraImagem(dataFaces$faces[357,])
mostraImagem(dataFaces$faces[353,])
mostraImagem(dataFaces$faces[352,])
mostraImagem(dataFaces$faces[351,])
mostraImagem(dataFaces$faces[350,])
mostraImagem(dataFaces$faces[352,])
mostraImagem(dataFaces$faces[357,])
mostraImagem(dataFaces$faces[3305,])
mostraImagem(dataFaces$faces[305,])
mostraImagem(dataFaces$faces[311,])
